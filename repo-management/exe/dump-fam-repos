#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler'
require 'bundler/setup'

require 'tty-table'
require 'dry-initializer'

require 'telefactor/repo_management'

CACHE_PATH = './marshaled_data.txt'

def load_fresh_data
  Telefactor::RepoManagement::Fam.new.repos.tap do |data|
    open(CACHE_PATH, 'w') { |f| f.write(Marshal.dump(data)) }
  end
end

def load_file_cache_data
  return nil unless test('e', CACHE_PATH)

  Marshal.load(open(CACHE_PATH) { |f| f.read })
end

# repos = load_fresh_data
repos = load_file_cache_data || load_fresh_data 

class TableCell
  class << self
    def from_repo(repo)
      new(repo: repo)
    end

    def header
      raise 'ABC method not implemented'
    end
  end

  def intialize(*)
    raise 'ABC cannot be constructed'
  end

  def value
    raise 'ABC method not implemented'
  end
end

class Name < TableCell
  def self.header
    'Name'
  end

  attr_reader :value

  def initialize(repo:)
    @value = repo.name
  end
end

class URL < TableCell
  def self.header
    'URL'
  end

  attr_reader :value

  def initialize(repo:)
    @value = repo.url
  end
end

class Phase < TableCell
  def self.header
    'Phase'
  end

  attr_reader :value

  def initialize(repo:)
    @value = repo.phase
  end
end

class Role < TableCell
  def self.header
    'Role'
  end

  attr_reader :value

  def initialize(repo:)
    @value = repo.role
  end
end

cell_classes = [
  Phase,
  Role,
  Name,
  URL,
]

rows = repos.map do |repo|
  cell_classes.map do |cell_class|
    cell_class.from_repo(repo).value
  end
end

rows.sort!

table = TTY::Table.new(
  header: cell_classes.map(&:header),
  rows: rows
)

class MarkdownBorder < TTY::Table::Border
  def_border do
    mid '-'
    mid_left '|'
    mid_mid '|'
    mid_right '|'

    left '|'
    center '|'
    right '|'
  end
end

rendered_table = table.render_with(MarkdownBorder)

puts rendered_table
