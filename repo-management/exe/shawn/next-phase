#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler'
require 'bundler/setup'

require 'lightly'
require 'pry' 
require 'git'
require 'shell'
require 'awesome_print'
require 'tty-prompt'

prompt = TTY::Prompt.new

require 'telefactor/repo_management'
include Telefactor::RepoManagement

THIS_FILE = Pathname(__FILE__).expand_path
TELEFACTOR_ROOT = begin
    dir = THIS_FILE.parent
    while dir.exist? && !(dir/'.git').exist? do
      puts dir
      dir = dir.parent
    end
    dir
  end

GAME_SUBMODULES_DIR = TELEFACTOR_ROOT / 'games' / '01-connery' / 'repos' / 'shawn'
GAME_SUBMODULES_DIR.mkpath unless GAME_SUBMODULES_DIR.exist?

prompt.warn(
  'TELEFACTOR_ROOT' => TELEFACTOR_ROOT,
  'GAME_SUBMODULES_DIR' => GAME_SUBMODULES_DIR
)


local_repos =
  GAME_SUBMODULES_DIR
  .each_child
  .select(&:directory?)
  .map { |repo_path|
    Git.open(repo_path) rescue nil
  }.compact


lightly = Lightly.new(
  dir: 'tmp/cache',
  life: '1d'
)

game = lightly.get 'shawn' do
  Shawn.new
end

prompt.warn('game.repos' => game.repos.map(&:name))

class RepoSync < Types::Custom::StrictStruct
  attribute :remote, Shawn::Repo
  attribute :local, Types.Instance(Git::Base)
end

class RepoUnsync < Types::Custom::StrictStruct
  attribute :remote, Shawn::Repo
end

syncs = []
unsyncs = []

game.repos.each { |remote|
  prompt.warn(remote.url)
  local_repo = local_repos.find { |local_repo| 
    remote_urls = local_repo.remotes.map(&:url)
    remote_urls.include?(remote.ssh_url)
  }
  if local_repo.nil?
    unsyncs << RepoUnsync.new(
      remote: remote,
    )
    next
  end

  syncs << RepoSync.new(
    remote: remote,
    local: local_repo,
  )
}

prompt.warn(
  "Synched: #{syncs.count}",
  "Unsynched: #{unsyncs.count}",
)

still_unsyncs = []
unsyncs.each { |unsync| 
  local = begin
    Git.clone(
      unsync.remote.ssh_url,
      unsync.remote.name,
      path: GAME_SUBMODULES_DIR.to_s 
    )
    syncs << RepoSync.new(
      remote: unsync.remote,
      local: local,
    )    
  rescue Exception => e
    still_unsyncs << unsync
  end
}

prompt.warn(
  "Synched: #{syncs.count}" ,
  "Still unsynched: #{still_unsyncs.count}",
)

if still_unsyncs.any?
  prompt.error(
    'Some repos could not be synched:',
    *still_unsyncs.map(&:name)
  )
  exit 1
end

latest = syncs.max_by { |s| s.remote.phase }

prompt.warn("Latest repo: #{latest.remote.name}")
if prompt.yes?('Pull latest master?')
  latest.local.add(all: true)
  Git::Lib.new(latest.local).stash_save('Stash before pull.') rescue nil
  latest.local.checkout('master')
  latest.local.pull('origin', 'master')
  prompt.ok('Pulled.')
end

if prompt.yes?('Create next phase repo?')
  oktokit_gateway = OktokitGateway.new
  oktokit_gateway.create_repo('shawn-05')
end

# sh = Shell.cd(TELEFACTOR_ROOT)
# sh.pushdir(GAME_SUBMODULES_DIR)
# telefactor_git = Git.open(TELEFACTOR_ROOT)